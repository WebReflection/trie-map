self.trieMap=function(t){"use strict";const e=Symbol("value"),{keys:r}=Object,o={ignoreCase:!1},s=(t,e)=>{for(let{length:r}=e,o=0;o<r;o++)if(!(t=t[e[o]]))return;return t},n=(t,o)=>{e in t&&o.push(t[e]);for(let e=r(t),{length:s}=e,i=0;i<s;i++)n(t[e[i]],o)},i=(t,o)=>{for(let s=r(t),{length:n}=s,l=0;l<n;l++){const r=t[s[l]];e in r&&o.push([s[l],r[e]]),i(r,o)}};return t.default=class{constructor(t=o){this.ignoreCase=!!t.ignoreCase,this.root={}}get size(){const t=[];return n(this.root,t),t.length}clear(){for(const t in this.root)delete this.root[t]}delete(t,o=!1){this.ignoreCase&&(t=t.toLowerCase());let{root:s}=this,n=0,{length:i}=t,l=[s];for(;n<i;){if(!(s=s[t[n++]]))return!1;l.push(s)}if(i)if(o){for(const t in l[--i])if(l[i][t]===s)return delete l[i][t],!0}else if(e in s){delete s[e];let t=r(s);for(;i--&&t.length<1;){for(t=r(l[i]),n=t.length;n--;)if(l[i][t[n]]===s){delete l[i][t[n]],t.splice(n,1);break}if(s=l[i],e in s)break}return!0}return!1}*entries(){const t=[];i(this.root,t);let e=0;for(;e<t.length;)yield t[e++]}forEach(t,e){const r=[];i(this.root,r);for(let{length:o}=r,s=0;s<o;s++)t.call(e,r[s][1],r[s][0],this)}get(t,r=!1){const o=s(this.root,this.ignoreCase?t.toLowerCase():t);if(r){const t=[];return o&&n(o,t),t}return o&&o[e]}has(t,r=!1){const o=s(this.root,this.ignoreCase?t.toLowerCase():t);return!!o&&(r||e in o)}keys(){const t=[];return i(this.root,t),t.map((t=>t[0]))}set(t,r){this.ignoreCase&&(t=t.toLowerCase());let{root:o}=this;for(let{length:e}=t,r=0;r<e;r++)o=o[t[r]]||(o[t[r]]={});return o[e]=r,this}values(){const t=[];return i(this.root,t),t.map((t=>t[1]))}},t}({}).default;
